from typing import (
    Any,
    Awaitable,
    Callable,
    Dict,
    List,
    Literal,
    NamedTuple,
    Optional,
    TypedDict,
    Union,
)


class RetoolRPCConfig(NamedTuple):
    """
    Configuration options for the Retool RPC.
    """

    # The host URL of the Retool instance.
    host: str

    # The API token for authenticating with the Retool instance.
    api_token: str

    # The ID of the resource in Retool (UUID format).
    resource_id: str

    # The optional environment identifier. Defaults to `production`.
    environment_name: Optional[str] = "production"

    # The version of the schema being used. If the resource enforces explicit versioning
    # this property must be set, and must be updated with each schema change.
    version: Optional[str] = None

    # The optional polling interval in milliseconds. Defaults to 1000. Minimum is 100.
    polling_interval_ms: Optional[int] = 1000

    # The optional polling timeout in milliseconds. Defaults to 5000.
    polling_timeout_ms: Optional[int] = 5000

    # The optional UUID of the agent. Will be automatically generated by default.
    agent_uuid: Optional[str] = None

    # The optional log level.
    log_level: Optional[Literal["debug", "info", "warn", "error"]] = None


# Represents the type of the argument. Right now we are supporting only string,
# boolean, number, dict, and json.
ArgumentType = Literal["string", "boolean", "number", "dict", "json"]

# Recursive JSON type
Json = Union[str, float, bool, None, List["Json"], Dict[str, "Json"]]


class Argument(TypedDict):
    """
    Represents an argument definition for a Retool function.
    """

    # The type of the argument.
    type: ArgumentType

    # Specifies whether the argument is expected to be an array.
    array: Optional[bool]

    # The description of the argument.
    description: Optional[str]

    # Specifies whether the argument is required.
    required: Optional[bool]


# Represents a map of argument names to argument definitions.
Arguments = Dict[str, Argument]


# Additional context information that is passed to the Retool function.
class RetoolContext(TypedDict):
    """
    Additional context information that is passed to the Retool function.
    """

    # Name of the user who is executing the function.
    user_name: Optional[str]

    # Email address of the user who is executing the function.
    user_email: Optional[str]

    # A list of group names of the user who is executing the function.
    user_groups: Optional[List[str]]

    # The organization name of the user who is executing the function.
    organization_name: Optional[str]


class Permissions(TypedDict, total=False):
    """
    Represents the permissions configuration for a Retool RPC function.
    """

    # The list of group names that have permission to execute the function.
    groupNames: Optional[List[str]]

    # The list of user emails that have permission to execute the function.
    userEmails: Optional[List[str]]


class FunctionSpecWithoutName(TypedDict):
    """
    Represents the specification for registering a Retool RPC function.
    """

    # The arguments of the function.
    arguments: Dict[str, Argument]

    # The implementation of the function.
    implementation: Callable[
        [Dict[str, Any], Optional[RetoolContext]], Union[Any, Awaitable[Any]]
    ]

    # The optional permissions configuration for the function.
    permissions: Optional[Permissions]


class RegisterFunctionSpec(TypedDict):
    """
    Represents the specification for registering a Retool RPC function.
    """

    # The name of the function.
    name: str

    # The arguments of the function.
    arguments: Dict[str, Argument]

    # The implementation of the function.
    implementation: Callable[
        [Dict[str, Any], Optional[RetoolContext]], Union[Any, Awaitable[Any]]
    ]

    # The optional permissions configuration for the function.
    permissions: Optional[Permissions]


class AgentServerError(TypedDict):
    """
    Agent server error that is thrown by Retool RPC.
    """

    # The error name.
    name: str

    # The error message.
    message: str

    # The error stack trace.
    stack: Optional[str]

    # The error status code.
    code: Optional[int]

    # The error additional details.
    details: Any


# Represents the current status of a function execution.
AgentServerStatus = Literal["continue", "stop", "done"]
